//! This module contains all code related to the parsing of the BESL language and the generation of the JSPD.

mod tokenizer;
pub mod parser;
pub mod lexer;

pub use lexer::Expressions;
pub use lexer::Operators;
pub use lexer::Node;
pub use lexer::Nodes;

pub use crate::lexer::NodeReference;
pub use crate::lexer::BindingTypes;

/// Parses BESL source code.
/// It first tokenizes the input then feeds it to the parser to build a syntax tree.
/// The syntax tree is just another representation of the source code.
/// It is missing the final transformation step, which is the lexing step.
pub fn parse(source: &str) -> Result<parser::Node, CompilationError> {
	let tokens = tokenizer::tokenize(source).map_err(|_e| CompilationError::Tokenization)?;
	let parser_root_node = parser::parse(tokens).map_err(|_e| CompilationError::Parsing)?;

	Ok(parser_root_node)
}

/// Lexes a syntax tree.
/// It takes the syntax tree generated by the parser and generates a new tree that is ready to be compiled.
/// This tree contains solved references between the program's resources.
/// This step is the final transformation step.
pub fn lex(node: parser::Node) -> Result<NodeReference, CompilationError> {
	let besl = lexer::lex(node).map_err(|e| CompilationError::Lex(e))?;

	Ok(besl)
}

/// Compiles a BESL source code string into a JSPD.
/// 
/// # Arguments
/// 
/// * `source` - The source code to compile.
/// * `parent` - An optional reference to a parent Scope node where the source code will be compiled into.
pub fn compile_to_besl(source: &str, parent: Option<Node>) -> Result<NodeReference, CompilationError> {
	if source.split_whitespace().next() == None {
		return Ok(lexer::Node::scope("".to_string()).into());
	}

	let tokens = tokenizer::tokenize(source).map_err(|_e| CompilationError::Undefined)?;
	let parser_root_node = parser::parse(tokens).map_err(|_e| CompilationError::Undefined)?;

	let besl = if let Some(parent)  = parent {
		lexer::lex_with_root(parent, parser_root_node).map_err(|_e| CompilationError::Undefined)?
	} else {
		lexer::lex(parser_root_node).map_err(|_e| CompilationError::Undefined)?
	};

	Ok(besl)
}

#[derive(Debug)]
pub enum CompilationError {
	Undefined,
	Tokenization,
	Parsing,
	Lex(lexer::LexError),
}